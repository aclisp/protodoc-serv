// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protodoc.proto

package protodoc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProtoDoc service

func NewProtoDocEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProtoDoc service

type ProtoDocService interface {
	// 把 proto3 定义的协议转换成文档
	Convert(ctx context.Context, in *ConvertReq, opts ...client.CallOption) (*ConvertRes, error)
}

type protoDocService struct {
	c    client.Client
	name string
}

func NewProtoDocService(name string, c client.Client) ProtoDocService {
	return &protoDocService{
		c:    c,
		name: name,
	}
}

func (c *protoDocService) Convert(ctx context.Context, in *ConvertReq, opts ...client.CallOption) (*ConvertRes, error) {
	req := c.c.NewRequest(c.name, "ProtoDoc.Convert", in)
	out := new(ConvertRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProtoDoc service

type ProtoDocHandler interface {
	// 把 proto3 定义的协议转换成文档
	Convert(context.Context, *ConvertReq, *ConvertRes) error
}

func RegisterProtoDocHandler(s server.Server, hdlr ProtoDocHandler, opts ...server.HandlerOption) error {
	type protoDoc interface {
		Convert(ctx context.Context, in *ConvertReq, out *ConvertRes) error
	}
	type ProtoDoc struct {
		protoDoc
	}
	h := &protoDocHandler{hdlr}
	return s.Handle(s.NewHandler(&ProtoDoc{h}, opts...))
}

type protoDocHandler struct {
	ProtoDocHandler
}

func (h *protoDocHandler) Convert(ctx context.Context, in *ConvertReq, out *ConvertRes) error {
	return h.ProtoDocHandler.Convert(ctx, in, out)
}
